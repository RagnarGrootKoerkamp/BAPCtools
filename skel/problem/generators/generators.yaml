#solution: /submissions/accepted/submission.py
#visualizer: /visualizers/asy.sh

data:
  sample:
    data:
      # Some small examples showing to help understanding of the problem.
      #- '':
      #    in: 1 2
      #    ans: '3'
      # Or to preserve newlines:
      #- '':
      #    in: |
      #      1 2
      #      3 4
      #    ans: |
      #      3
      #      7

  secret:
    data:
      # You can re-use the input validator by symlinking it as `generator` in
      # this directory. Below is some inspiration for test cases.
      #
      # Use `-X` to set the value of variable `X`, as provided to the `read_*` functions.
      # Use `min` and `max` to set variables to their minimum and maximum
      # allowed values.
      #- min: generator {seed} -n min -k min -ai min
      #- max: generator {seed} -n max -k max -ai max
      # Leave a variable out to pick a uniform random value.
      #- random_a: generator {seed} -n max
      # Provide an explicit list of values:
      #- binary: generator {seed} -ai 0,1
      # Provide probabilities for each value:
      #- mostly_0: generator {seed} -ai 0:0.99,1:0.01
      # Uniform random values in range:
      #- small_a: generator {seed} -n 10 -ai 1..100
      # Use a geometric distribution (see validation.h for more):
      #- geometric: generator {seed} -n 100 -k 123 -ai geometric(0.1)

      # Manual cases can be added like this:
      #- copied:
      #    copy: manual/testcase.in
      # They should be written to somewhere inside generators/ and will be
      # copied into data/.
      # You can also dump them in data/secret and run `bt generate --add-unlisted`.

      # Typically, small test cases are more likely to find bugs/edge cases.
      # When the limit on n is 1000, do something like:
      #- small: generator {seed} -n 1
      #- small: generator {seed} -n 2
      #- small: generator {seed} -n 3
      #- small: generator {seed} -n 7
      #- small: generator {seed} -n 13
      #- medium: generator {seed} -n 85
      #- medium: generator {seed} -n 103
      #- medium: generator {seed} -n 243
      #- large: generator {seed} -n 991
      #- large: generator {seed} -n 999
      #- large: generator {seed} -n 1000

  invalid_inputs:
    # Add invalid testcase to ensure that input_validators correctly rejects them.
    data:
      empty:
          in: ""
      newline:
          in: "\n"
      random:
          in: YVRtr&*teTsRjs8ZC2%kN*T63V@jJq!d
      not_printable_1:
          in: "\x7f"
      not_printable_2:
          in: "\xe2\x82\xac"
      unicode:
          in: "¯\\_(ツ)_/¯"

  invalid_answers:
    # Add valid testcase with invalid answers to ensure that the answer_validators correctly rejects them.
    # (The output validator is also called with these)
    data:
      #dont_start_with_whitespace:
      #    in: "<valid testcase>"
      #    ans: " <valid answer>"

  invalid_outputs:
    # Add valid testcase with answer and invalid team output to ensure that the out_validator correctly rejects them.
    # (The output validator is also called with these)
    data:
      #dont_start_with_whitespace:
      #    in: "<valid testcase>"
      #    ans: "<valid answer>"
      #    out: "<invalid answer>"
