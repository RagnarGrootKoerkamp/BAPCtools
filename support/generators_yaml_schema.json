{
  "title": "Generator",
  "type": "object",
  "properties": {
    "solution": { "$ref": "#/$defs/solution" },
    "visualizer": { "$ref": "#/$defs/visualizer" },
    "random_salt": { "$ref": "#/$defs/random_salt" },
    "generators": { "title": "Generators for this problem", "type": "object" },
    "data": {
      "title": "Testdata root",
      "description": "The root test group. Must contain the testgroups 'sample' and 'secret'.",
      "type": "object",
      "properties": {
        "sample": { "$ref": "#/$defs/testgroup" },
        "secret": { "$ref": "#/$defs/testgroup" },
        "testdata.yaml": { "$ref": "#/$defs/testdata_settings" }
      },
      "additionalProperties": false,
      "required": ["sample", "secret"]
    }
  },
  "additionalProperties": true,
  "required": ["data"],

  "$defs": {

    "testgroup": {
      "type": "object",
      "description": "A testgroup",
      "properties": {
        "data": {
          "description": "Commands or dictionaries defining the testdata in this testgroup",
          "oneOf": [
            {
              "type": "array",
              "items": { "allOf" : [{ "$ref": "#/$defs/data_dict" }, {"maxProperties": 1}] }
            },
            { "$ref": "#/$defs/data_dict" }
          ]
        },
        "include": {
          "type": "array",
          "description": "Testcases and testgroups to be included in this testgroup from elsewhere.",
          "items": { "type": "string" }
        },
        "testdata.yaml": { "$ref": "#/$defs/testdata_settings" },
        "solution": { "oneOf": [{ "type": "string" }, { "type": "null" }] }
      },
      "additionalProperties": false
    },

    "testdata_settings": {
      "type": "object",
      "title": "Testdata settings",
      "description": "Testdata settings for this testgroup. Will be copied to its `testdata.yaml`.",
      "properties": {
        "on_reject": { "enum": ["break", "continue"], "default": "break" },
        "grading": { "enum": ["default", "custom"] },
        "grader_flags": { "type": "string", "examples": ["min", "sum"]},
        "input_validator_flags": { "type": "string" },
        "accept_score": { "type": "string" },
        "reject_score": { "type": "string" },
        "range": { "type": "string" }
      }
    },

    "data_dict": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9_.-]*$": {
          "oneOf": [
            { "$ref": "#/$defs/testgroup" },
            { "$ref": "#/$defs/generator" },
            { "type": "null" }
          ]
        }
      },
      "additionalProperties": false,
      "minProperties": 1
    },

    "generator": {
      "title": "Generator invocation",
      "description": "Generator invocation for a testcase",
      "oneOf": [
        { "$ref": "#/$defs/command" },
        {
          "title": "Generator invocation dictionary",
          "description": "Generator invocation given as a dictionary. Useful for overriding 'visualizer' and 'solution'.",
          "type": "object",
          "properties": {
            "input": { "type": "string" },
            "visualizer": { "oneOf": [{"$ref": "#/$defs/visualizer"}, {"type": "null" }] },
            "random_salt": { "$ref": "#/$defs/random_salt" },
            "solution": { "oneOf": [ { "$ref": "#/$defs/solution" }, { "type": "null" }]}
          },
          "required": ["input"],
          "additionalProperties": false
        }
      ]
    },

    "visualizer": {
        "title": "Visualizer",
        "type": "string",
        "description": "Absolute path to a visualizer",
        "examples": ["/visualizers/asy.py {name}"]
      },

    "random_salt": {
        "title": "Random salt",
        "type": "string",
        "description": "Salt to add to {seed} variables",
        "examples": ["abcd"]
      },

    "solution": {
        "type": "string",
        "title": "Solution",
        "description": "Absolute path to a solution for this problem or testcase.",
        "examples": ["/submissions/accepted/sol.py"]
      },

    "command": {
      "title": "Generator invocation",
      "description": "Invocation of a generator creating the named test case",
      "examples": ["forest --n 40 --connected", "path.cpp 20", "random {seed}"],
      "type": "string",
      "pattern": "^[^{}]*(\\{(name|seed(:[0-9]+)?)\\}[^{}]*)*$"
    }
  }
}
