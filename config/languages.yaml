# The MIT License (MIT)
#
# Copyright (c) 2010-2019 Kattis and all respective contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
#
# Language configuration for Kattis Problem Format
# ================================================
#
# The language configuration consists of a dictionary of languages.
# The keys in the dictionary are lower-case alphanumeric identifiers
# (must match the regular expression "[a-z][a-z0-9]*").  Each language
# is in turn a dictionary which may contain the following six keys.
#
#   name: String, name of the language.
#
#   priority: Integer indicating the tie-breaker priority of this
#             language for language detection.  See "language detection"
#             below.  All languages must have distinct priorities.
#
#   files: String, space-separated glob patterns indicating what files
#          are considered source files.
#
#   shebang: Optional, string, for language detection only.  See
#            semantics under "language detection" below.
#
#   compile: Optional, string, command to compile or syntax-check the
#            source code.
#
#   run: String, command to run a program.
#
#
# Language detection
# ==================
#
# Language detection proceeds as follows:
#
# 1. For each language, a file included in the program is considered
#    to be a source file if its name matches the "files" glob for the
#    language.  If the language specifies a "shebang" entry, the
#    first line of the file *must additionally* match the shebang.
#
# 2. For each language, count how many files in the program are source
#    files for that language.
#
# 3. The language of the program is the one under which the program
#    has the maximum number of source files.  In case of ties, the
#    language that has the highest priority takes precedence.
#
#
# Entry point type
# ================
#
# A language can have three different entry point types, reflecting
# how a program in the language is started:
#
# binary: the compile command produces an executable file
#
# mainfile: name of source code file to pass to interpreter/runtime
#           environment as entry point to the program.
#
# mainclass: similar to mainfile, but at a higher level than a file.
#            Typical (only?) examples are Java and Java-based
#            languages such as Scala.
#
# The entry point type of a language is implicitly specified by using
# one of the four meta-variables {binary}, {mainfile}, {mainclass},
# {Mainclass} defined below.  A language specification *must* use
# exactly one of these four metavariables.
#
#
# Metavariables
# =============
#
# The following metavariables are available for use in the "compile"
# and "run" entries of a language.
#
# {path}: path where the source files are located
#
# {files}: list of all source files
#
# {binary}: arbitrary file name that can be defined by the
#           implementation.
#
# {mainfile}: * if the program consists of a single source file,
#               {mainfile} equals the name of that source file.
#             * if the program contains a source file matching the
#               glob "[mM][aA][iI][nN].*", {mainfile} equals the name
#               of that file (in case of multiple such files,
#               behaviour is undefined).
#             * otherwise, {mainfile} equals the lexicographically
#               smallest source file name
#
# {mainclass}: equals {mainfile} without filename extension.
#
# {Mainclass}: equals {mainclass}, but first letter capitalized.
#
# {memlim}: memory limit
#

---

c:
    name: 'C'
    priority: 950
    files: '*.c'
    compile: 'gcc -g -O2 -std=gnu11 -o {binary} {files} -lm -Wall -Wfatal-errors -fdiagnostics-color=always'
    run: '{binary}'

cpp:
    name: 'C++'
    priority: 1000
    files: '*.cc *.C *.cpp *.cxx *.c++'
    compile: 'g++ -g -O2 -std=gnu++20 -o {binary} {files} -Wall -Wfatal-errors -fdiagnostics-color=always'
    run: '{binary}'

csharp:
    name: 'C#'
    priority: 700
    files: '*.cs'
    compile: 'mcs -out:{binary}.exe -optimize+ -r:System.Numerics {files}'
    run: 'mono {binary}.exe'

cobol:
    name: 'Cobol'
    priority: 50
    files: '*.cob'
    compile: 'cobc -o {binary} -g -O2 -std=default -free -x -static {files}'
    run: '{binary}'

fsharp:
    name: 'F#'
    priority: 675
    files: '*.fs'
    compile: 'fsharpc --out:{binary}.exe --optimize+ -r:System.Numerics {files}'
    run: 'mono {binary}.exe'

go:
    name: 'Go'
    priority: 400
    files: '*.go'
    compile: 'gccgo -g -o {binary} -static-libgcc {files}'
    run: '{binary}'

haskell:
    name: 'Haskell'
    priority: 600
    files: '*.hs *.c'
    compile: 'ghc -O2 -ferror-spans -threaded -rtsopts -tmpdir {path} -o {binary} {files}'
    run: '{binary} +RTS -M{memlim}m -K8m -RTS'

java:
    name: 'Java'
    priority: 800
    files: '*.java'
    compile: 'javac -encoding UTF-8 -sourcepath {path} -d {path} {files}'
    run: 'java -Dfile.encoding=UTF-8 -XX:+UseSerialGC -Xss64m -Xms{memlim}m -Xmx{memlim}m -cp {path} {mainclass}'

javascript:
    name: 'JavaScript'
    priority: 500
    files: '*.js'
    compile: 'js24 -c {files}'
    run: 'js24 {mainfile}'

kotlin:
    name: 'Kotlin'
    priority: 250
    files: '*.kt'
    compile: 'kotlinc -d {path}/ -- {files}'
    run: 'kotlin -Dfile.encoding=UTF-8 -J-XX:+UseSerialGC -J-Xss64m -J-Xms{memlim}m -J-Xmx{memlim}m -cp {path}/ {Mainclass}Kt'

lisp:
    name: 'Common Lisp'
    priority: 200
    files: '*.lisp *.cl'
    compile: 'sbcl --noinform --noprint --non-interactive --eval ''(if (equal (compile-file {mainfile}) NIL) (sb-ext:exit :code 43) ())'' '
    run: 'sbcl --noinform --non-interactive --load {mainfile}'

ocaml:
    name: 'OCaml'
    priority: 375
    files: '*.ml'
    compile: 'ocamlopt -o {binary} unix.cmxa str.cmxa bigarray.cmxa {files}'
    run: '{binary}'

objectivec:
    name: 'Objective C'
    priority: 300
    files: '*.m *.c'
    # The postargs for the compile command are '-lm -lobjc `gnustep-config --objc-flags` -lgnustep-base -o {binary}', edited to remove -I. and -I(home dir of user running the command), and to remove duplicate definition of GNUSTEP_BASE_LIBRARY
    compile: 'gcc -O2 -std=gnu99 {files} -lm -lobjc -MMD -MP -DGNUSTEP -DGNUSTEP_BASE_LIBRARY=2 -DGNU_GUI_LIBRARY=1 -DGNU_RUNTIME=1 -fno-strict-aliasing -fexceptions -fobjc-exceptions -D_NATIVE_OBJC_EXCEPTIONS -fPIC -Wall -DGSWARN -DGSDIAGNOSE -Wno-import -g -O2 -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security -fgnu-runtime -fconstant-string-class=NSConstantString -I/usr/local/include/GNUstep -I/usr/include/GNUstep -lgnustep-base -o {binary}'
    run: '{binary}'

pascal:
    name: 'Pascal'
    priority: 350
    files: '*.pas'
    compile: 'fpc -o{mainfile}.out -O2 -XS -Xt {mainfile}'
    run: '{mainfile}.out'

php:
    name: 'PHP'
    priority: 450
    files: '*.php'
    compile: 'php -n -d display_errors=stderr -d html_errors=0 -l {files}'
    run: 'php -n -d display_errors=stderr -d html_errors=0 -d memory_limit={memlim}m -f {mainfile}'

prolog:
    name: 'Prolog'
    priority: 100
    files: '*.pl'
    compile: 'swipl -O -q -g main -t halt -o {binary} -c {files}'
    run: '{binary}'

# By default Use pypy for python.
# .py defaults to Python 2 unless a Python 3 shebang is found.
python2:
    name: 'Python 2'
    priority: 900
    files: '*.py *.py2'
    compile: 'pypy -m py_compile {files}'
    run: 'pypy {mainfile}'

python3:
    name: 'Python 3'
    priority: 901
    files: '*.py3'
    compile: 'pypy3 -m py_compile {files}'
    run: 'pypy3 {mainfile}'

python3b:
    name: 'Python 3'
    priority: 902
    files: '*.py'
    shebang: '^#!.*(python3\b|pypy3\b)'
    compile: 'pypy3 -m py_compile {files}'
    run: 'pypy3 {mainfile}'

# Fall back to cpython if pypy isn't found.
cpython2:
    name: 'CPython 2'
    priority: 800
    files: '*.py *.py2'
    compile: 'python2 -m py_compile {files}'
    run: 'python2 {mainfile}'

cpython3:
    name: 'CPython 3'
    priority: 801
    files: '*.py3'
    compile: 'python3 -m py_compile {files}'
    run: 'python3 {mainfile}'

cpython3b:
    name: 'CPython 3'
    priority: 802
    files: '*.py'
    shebang: '^#!.*(python3\b|pypy3\b)'
    compile: 'python3 -m py_compile {files}'
    run: 'python3 {mainfile}'

# Use .cpy to explicitly invoke CPython 3
cpython:
    name: 'Python 3'
    priority: 800
    files: '*.cpy'
    compile: 'python3 -m py_compile {files}'
    run: 'python3 {mainfile}'

ruby:
    name: 'Ruby'
    priority: 650
    files: '*.rb'
    # Note that this compile command only syntax-checks the main file --
    # unfortunately the ruby -c command does not provide the option to
    # syntax-check multiple files.
    compile: 'ruby -c {mainfile}'
    run: 'ruby {mainfile}'

rust:
    name: 'Rust'
    priority: 575
    files: '*.rs'
    compile: 'rustc -o{binary} -O --crate-type bin --edition=2018 {files}'
    run: '{binary}'

scala:
    name: 'Scala'
    priority: 550
    files: '*.sc *.scala'
    compile: 'scalac -encoding UTF-8 -sourcepath {path} -d {path} {files}'
    run: 'scala -J-Xmx{memlim}m -classpath {path} {mainclass}'

# Executes any .sh file.
shell:
    name: 'Shell'
    priority: 900
    files: '*.sh'
    run: 'sh {mainfile}'

# Executes any .bash file.
bash:
    name: 'Bash'
    priority: 900
    files: '*.bash'
    run: 'bash {mainfile}'
