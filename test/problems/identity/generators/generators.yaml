solution: /submissions/accepted/author.py
visualizer: /visualizers {name}
random_salt: 'abc'

generators:
  main.py:
    - main.py
    - lib.py
  main.cpp:
    - main.cpp
    - lib.h
  main.c:
    - main.c
    - lib.h

data:
  sample:
    type: directory
    #solution:
    data:
      # Both the empty value and ~ parse as None.
      '1':
      '2': ~
      '3': manual/sample.in
      '4': manual/inans.in

  secret:
    type: directory
    data:
      named_group:
        type: directory
        data:
          stdoutpy: stdout.py 200
          stdoutcpp: stdout.cpp 201
          inans: write_in_and_ans.py {name} 202
          hintdesc: hint_desc.py {name} 203
          main.py: main.py 204
          main.c: main.c 205
          main.cpp: main.cpp 206
      numbered_group:
        type: directory
        data:
          - dir: dir 300
            dir2: dir 301
          - dir: dir/ 306
          - dir_run: dir_run 303
          - dir_build: dir_build 304
          - dir_build_run: dir_build_run 305
      zero_prefix_group:
        type: directory
        data:
          # Both ~ (None) and the empty string can be used to have only numbers as testcase names.
          - ~: stdout.py 123 # 01.in
          - '': stdout.py 124
          - '': stdout.py 125
          - '': stdout.py 126
          - '': stdout.py 127
          - '': stdout.py 128
          - '': stdout.py 129
          - '': stdout.py 130
          - '': stdout.py 131
          - '': stdout.py 132 # 10.in
      seeding:
        type: directory
        testdata.yaml:
          arbitrary_key: some_value
        solution: /submissions/accepted/author.cpp
        random_salt: 'def'
        data:
          - '': random_gen.py {seed}
          - '': random_gen.py  {seed} # the entire argument is hashed, so the double space matters.
          - '': random_gen.py {seed:1}
          - '': random_gen.py {seed:01} # :01 is part of the command string, so the hash is different.
          # Random_salt must be a string.
          - '':
              random_salt: '1.0'
              input: random_gen.py {seed}
          - '':
              random_salt: '1.00'
              input: random_gen.py {seed}
          - '':
              random_salt: 'yes'
              input: random_gen.py {seed}
          - '':
              random_salt: 'true'
              input: random_gen.py {seed}
      testcase_dict_1:
        input: random_gen.py {seed:6}
      testcase_dict_2:
        solution: /generators/solution.c
        input: random_gen.py {seed:7}
      testcase_dict_3:
        visualizer:
        input: random_gen.py {seed:8}
      testcase_dict_4:
        solution:
        visualizer:
        random_salt: xyz
        input: random_gen.py {seed:9}
      unused_args_1: > # Spread arguments over multiple lines. 
        random_gen.py
        {seed}
        extra
        unused
        arg
      unused_args_2: | # Include newlines in the string value.
        random_gen.py
        {seed}
        extra
        unused
        arg
      # Arguments are split on white space.
      space_in_seed_1: random_gen.py 'a b' # 'a and b'
      space_in_seed_2: random_gen.py "a\ b" # "a\ and b"
      space_in_seed_3: random_gen.py "a b " # "a and b and "
      space_in_seed_4: random_gen.py \ a\ b # \ and a\ and b

      # Commands should always be strings.
      boolean_generator_yes:
        solution: /generators/yes
        input: y
      boolean_generator_no:
        solution: /generators/no
        input: n
      boolean_generator_true:
        solution: /generators/true
        input: t
      boolean_generator_false:
        solution: /generators/false
        input: f
        unknown_key:
      empty_group_1:
        type: directory
      empty_group_2:
        type: directory
        data:
      empty_group_3:
        type: directory
        data: []
      empty_group_4:
        type: directory
        data:
      empty_group_5:
        type: directory
        data:
          - a: stdout.py 501 # 1-a
            b: stdout.py 502 # 1-b
      empty_group_6:
        type: directory
        data:
          - '': stdout.py 503
      json: {type: directory, data: [{'': stdout.py 600, '1': stdout.py 601}, {'': stdout.py 602}]}
    unknown_key:

unknown_key:
