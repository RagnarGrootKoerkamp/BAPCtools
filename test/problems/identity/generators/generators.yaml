solution: /submissions/accepted/author.py
# The visualizer is disabled to speed up testing.
#visualizer: /visualizers
random_salt: "abc"

generators:
  main_py:
    - main.py
    - lib.py
  main_cpp:
    - main.cpp
    - lib.h
  main_c:
    - main.c
    - lib.h

data:
  invalid_inputs:
    data:
      "lo":
        in: "-1"
      "hi":
        in: "1001"
      "extra_line": 
        in: "0\n\n"
      "leading_space":
        in: " 0"
      "trailing_space":
        in: "0 "
      "leading_newline":
        in: "\n0"
  invalid_answers:
    data:
      "leading_space":
        in: "0"
        ans: " 0"
      "trailing_space":
        in: "0"
        ans: "0 "
  invalid_outputs:
    data:
      'wrong_answer':
          in: "0"
          ans: "0"
          out: "1"
  sample:
    #solution:
    data:
      # Both the empty value and ~ parse as None.
      "1":
        in: "0"
        # 3 is quoted since only strings are allowed to prevent conversion issues.
        ans: "0"
      "2":
        # Use | for multi-line input
        in: |
          999
        ans: |
          999
      "3":
        copy: manual/sample
      "4":
        copy: manual/inans

  secret:
    data:
      named_group:
        data:
          stdoutpy: stdout.py 200
          stdoutcpp: stdout.cpp 201
          inans: write_in_and_ans.py 202
          hintdesc: hint_desc.py 203
          main_py: main_py 204
          main_c: main_c 205
          main_cpp: main_cpp 206
      numbered_group:
        data:
          - dir: dir 300
          - dir2: dir 301
          - dir: dir/ 306
          - dir_run: dir_run 303
          - dir_build: dir_build 304
          - dir_build_run: dir_build_run 305
      zero_prefix_group:
        data:
          # Both ~ (None) and the empty string can be used to have only numbers as testcase names.
          - ~: stdout.py 123 # 01.in
          - "": stdout.py 124
          - "": stdout.py 125
          - "": stdout.py 126
          - "": stdout.py 127
          - "": stdout.py 128
          - "": stdout.py 129
          - "": stdout.py 130
          - "": stdout.py 131
          - "": stdout.py 132 # 10.in
      seeding:
        solution: /submissions/accepted/author.cpp
        random_salt: "def"
        data:
          - "": random_gen.py {seed}
          - "": random_gen.py  {seed} # the entire argument is hashed, so the double space matters.
          - "": random_gen.py {seed:1}
          - "": random_gen.py {seed:01} # :01 is part of the command string, so the hash is different.
          # Random_salt must be a string.
          - "":
              random_salt: "1.0"
              generate: random_gen.py {seed}
          - "":
              random_salt: "1.00"
              generate: random_gen.py {seed}
          - "":
              random_salt: "yes"
              generate: random_gen.py {seed}
          - "":
              random_salt: "true"
              generate: random_gen.py {seed}
      testcase_dict_1:
        generate: random_gen.py {seed:6}
      testcase_dict_2:
        solution: /generators/solution.c
        generate: random_gen.py {seed:7}
      testcase_dict_3:
        visualizer:
        generate: random_gen.py {seed:8}
      unused_args_1: > # Spread arguments over multiple lines.
        random_gen.py
        {seed}
        extra
        unused
        arg
      unused_args_2: | # Include newlines in the string value.
        random_gen.py
        {seed}
        extra
        unused
        arg
      # Arguments are split on white space.
      space_in_seed_1: random_gen.py 'a b' # 'a and b'
      space_in_seed_2: random_gen.py "a\ b" # "a\ and b"
      space_in_seed_3: random_gen.py "a b " # "a and b and "
      space_in_seed_4: random_gen.py \ a\ b # \ and a\ and b

      # Commands should always be strings.
      boolean_generator_yes:
        solution: /generators/yes
        generate: y
      boolean_generator_no:
        solution: /generators/no
        generate: n
      boolean_generator_true:
        solution: /generators/true
        generate: t
      boolean_generator_false:
        solution: /generators/false
        generate: f
      empty_group_2:
        data: {}
      empty_group_3:
        data: []
      non_empty_group_5:
        data:
          - a: stdout.py 501 # 1-a
          - b: stdout.py 502 # 2-b
      non_empty_group_6:
        data:
          - "": stdout.py 503
      json:
        {
          data:
            [
              { "": stdout.py 600 },
              { "1": stdout.py 601 },
              { "": stdout.py 602 },
            ],
        }

unknown_key:
